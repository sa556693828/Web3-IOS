{
  "address": "0x0a769c3a5179c0d86b83363e162E9c8e45567096",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_withdrawAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_mintPassPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_limit",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "LogChangeMintPassLimit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "LogChangeMintPassPrice",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "LogChangeWithdrawAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "LogClaimFounder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "LogClaimFreeMintPass",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "LogClaimMintPass",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "LogWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "accPwdHashArray",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "accPwdHash",
          "type": "string"
        }
      ],
      "name": "burnMintPass",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newContractAddress",
          "type": "address"
        }
      ],
      "name": "changeFounderAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "paramsStr",
          "type": "string"
        }
      ],
      "name": "changeFounderParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newContractAddress",
          "type": "address"
        }
      ],
      "name": "changeMintPassAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_limit",
          "type": "uint256"
        }
      ],
      "name": "changeMintPassLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "changeMintPassPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_withdrawAddress",
          "type": "address"
        }
      ],
      "name": "changeWithdrawAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "founder",
      "outputs": [
        {
          "internalType": "contract NFTFounder",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "accPwdHash",
          "type": "string"
        }
      ],
      "name": "getFounderTokenIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "accPwdHash",
          "type": "string"
        }
      ],
      "name": "getMintPassTokenIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "accPwdHash",
          "type": "string"
        }
      ],
      "name": "hasFounderNFT",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "accPwdHash",
          "type": "string"
        }
      ],
      "name": "hasMintPass",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "accPwdHash",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "hWallet",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "pattern",
          "type": "string"
        }
      ],
      "name": "mintFounder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintPass",
      "outputs": [
        {
          "internalType": "contract NFTMintPass",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "accPwdHash",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "pattern",
          "type": "string"
        }
      ],
      "name": "mintPassFreeMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintPassLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "accPwdHash",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "pattern",
          "type": "string"
        }
      ],
      "name": "mintPassMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintPassPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "accPwdHash",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "hWallet",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "pattern",
          "type": "string"
        }
      ],
      "name": "mintingEvent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "accPwdHash",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "sWallet",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "hWallet",
          "type": "address"
        }
      ],
      "name": "pushUserData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferFounderContractOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferMintPassContractOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "users",
      "outputs": [
        {
          "internalType": "string",
          "name": "accPwdHash",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "softwareWallet",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "hardwareWallet",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc23fe5ddd0fc5684f94f9296c39094f575235f97869294b74f76e73e35c248c9",
  "receipt": {
    "to": null,
    "from": "0x30B8277e08a6DaebFDC73239FB6973Fcc484d11A",
    "contractAddress": "0xd785dA55E0B6DE2Fc81835E331db3A3B19E3fC3a",
    "transactionIndex": 133,
    "gasUsed": "2394121",
    "logsBloom": "0x
    "blockHash": "0x235e901c81330bebfe0b87565715e1cedf5a99e21ec31d3241a5bc061cece206",
    "transactionHash": "0xc23fe5ddd0fc5684f94f9296c39094f575235f97869294b74f76e73e35c248c9",
    "logs": [
      {
        "transactionIndex": 133,
        "blockNumber": 18098176,
        "transactionHash": "0xc23fe5ddd0fc5684f94f9296c39094f575235f97869294b74f76e73e35c248c9",
        "address": "0xd785dA55E0B6DE2Fc81835E331db3A3B19E3fC3a",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000030b8277e08a6daebfdc73239fb6973fcc484d11a"
        ],
        "data": "0x",
        "logIndex": 396,
        "blockHash": "0x235e901c81330bebfe0b87565715e1cedf5a99e21ec31d3241a5bc061cece206"
      }
    ],
    "blockNumber": 18098176,
    "cumulativeGasUsed": "17387614",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x30B8277e08a6DaebFDC73239FB6973Fcc484d11A",
    "24000000000000000000",
    24
  ],
  "numDeployments": 1,
  "solcInputHash": "12e5757678e57757a0e1740f8a844d85",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_withdrawAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_mintPassPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LogChangeMintPassLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LogChangeMintPassPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"LogChangeWithdrawAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"LogClaimFounder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"LogClaimFreeMintPass\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"LogClaimMintPass\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LogWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"accPwdHashArray\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"accPwdHash\",\"type\":\"string\"}],\"name\":\"burnMintPass\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newContractAddress\",\"type\":\"address\"}],\"name\":\"changeFounderAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newContractAddress\",\"type\":\"address\"}],\"name\":\"changeMintPassAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"changeMintPassLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"changeMintPassPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_withdrawAddress\",\"type\":\"address\"}],\"name\":\"changeWithdrawAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"founder\",\"outputs\":[{\"internalType\":\"contract NFTFounder\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"accPwdHash\",\"type\":\"string\"}],\"name\":\"getFounderTokenIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"accPwdHash\",\"type\":\"string\"}],\"name\":\"getMintPassTokenIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"accPwdHash\",\"type\":\"string\"}],\"name\":\"hasFounderNFT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"accPwdHash\",\"type\":\"string\"}],\"name\":\"hasMintPass\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"accPwdHash\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"hWallet\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"pattern\",\"type\":\"string\"}],\"name\":\"mintFounder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintPass\",\"outputs\":[{\"internalType\":\"contract NFTMintPass\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"accPwdHash\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"pattern\",\"type\":\"string\"}],\"name\":\"mintPassFreeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintPassLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"accPwdHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"pattern\",\"type\":\"string\"}],\"name\":\"mintPassMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintPassPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"accPwdHash\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"hWallet\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"pattern\",\"type\":\"string\"}],\"name\":\"mintingEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"accPwdHash\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"sWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"hWallet\",\"type\":\"address\"}],\"name\":\"pushUserData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferFounderContractOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferMintPassContractOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"accPwdHash\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"softwareWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"hardwareWallet\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Logic.sol\":\"Logic\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd89f3585b211fc9e3408384a4c4efdc3a93b2f877a3821046fa01c219d35be1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @title ERC721 Burnable Token\\n * @dev ERC721 Token that can be burned (destroyed).\\n */\\nabstract contract ERC721Burnable is Context, ERC721 {\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _burn(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x52da94e59d870f54ca0eb4f485c3d9602011f668ba34d72c88124a1496ebaab1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\\n\\n        if (batchSize > 1) {\\n            // Will only trigger during construction. Batch transferring (minting) is not available afterwards.\\n            revert(\\\"ERC721Enumerable: consecutive transfers not supported\\\");\\n        }\\n\\n        uint256 tokenId = firstTokenId;\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0xa8796bd16014cefb8c26449413981a49c510f92a98d6828494f5fd046223ced3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/Logic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./NFTFounder.sol\\\";\\nimport \\\"./NFTMintPass.sol\\\";\\n\\ncontract Logic is Ownable, Pausable {\\n\\n    NFTFounder public founder;\\n    NFTMintPass public mintPass;\\n    address public withdrawAddress;\\n    uint public mintPassPrice;\\n    uint public mintPassLimit;\\n\\n\\n    constructor(address _withdrawAddress, uint _mintPassPrice, uint _limit){\\n        //        NFTFounder _founder = new NFTFounder();\\n        //        founder = _founder;\\n        //\\n        //        NFTMintPass _mintPass = new NFTMintPass();\\n        //        mintPass = _mintPass;\\n\\n        withdrawAddress = _withdrawAddress;\\n        mintPassPrice = _mintPassPrice;\\n        mintPassLimit = _limit;\\n    }\\n\\n\\n    struct User {\\n        string accPwdHash;\\n        address softwareWallet;\\n        address hardwareWallet;\\n    }\\n\\n    mapping(string => User) public users;\\n\\n    event LogClaimMintPass(string, address, address);\\n    event LogClaimFreeMintPass(string, address, address);\\n\\n    function mintPassFreeMint(string  memory accPwdHash, address to, string memory pattern)\\n    external\\n    whenNotPaused\\n    onlyOwner\\n    {\\n        //check mint pass claimed\\n        require(to != address(0), \\\"Invalid to address\\\");\\n        require(!compareStr(users[accPwdHash].accPwdHash, accPwdHash), \\\"this account has claimed mint pass recently\\\");\\n        require(mintPass.totalSupply() < mintPassLimit, \\\"Mint pass total supply is limited\\\");\\n        require(mintPass.owner() == address(this), \\\"Mint pass contract owner is not current contract!\\\");\\n        emit LogClaimFreeMintPass(accPwdHash, _msgSender(), to);\\n        users[accPwdHash] = User(accPwdHash, to, address(0));\\n        accPwdHashArray.push(accPwdHash);\\n        mintPass.safeMint(to, pattern);\\n    }\\n\\n    string[] public accPwdHashArray;\\n\\n    function mintPassMint(string  memory accPwdHash, string memory pattern)\\n    external\\n    whenNotPaused\\n    payable\\n    {\\n        require(mintPass.owner() == address(this), \\\"Mint pass contract owner is not current contract!\\\");\\n        require(msg.value >= mintPassPrice, \\\"Price is wrong\\\");\\n        require(_msgSender() != address(0), \\\"Invalid sender address\\\");\\n        require(mintPass.totalSupply() < mintPassLimit, \\\"Mint pass total supply is limited\\\");\\n        //check mint pass claimed\\n        require(!compareStr(users[accPwdHash].accPwdHash, accPwdHash), \\\"This account has claimed mint pass recently\\\");\\n        emit LogClaimMintPass(accPwdHash, _msgSender(), _msgSender());\\n        users[accPwdHash] = User(accPwdHash, _msgSender(), address(0));\\n        accPwdHashArray.push(accPwdHash);\\n        mintPass.safeMint(_msgSender(), pattern);\\n    }\\n\\n    function compareStr(string  memory s1, string  memory s2)\\n    internal\\n    pure\\n    returns (bool)\\n    {\\n        return keccak256(abi.encodePacked(s1)) == keccak256(abi.encodePacked(s2));\\n    }\\n\\n    function burnMintPass(string memory accPwdHash)\\n    public\\n    onlyOwner\\n    {\\n        require(mintPass.owner() == address(this), \\\"Mint pass contract owner is not current contract!\\\");\\n        address mintPassAddress = users[accPwdHash].softwareWallet;\\n        uint balance = mintPass.balanceOf(mintPassAddress);\\n        require(balance > 0, \\\"this account doesn't have mint pass\\\");\\n        uint tokenId = mintPass.tokenOfOwnerByIndex(mintPassAddress, 0);\\n        mintPass.burn(tokenId);\\n    }\\n\\n    event LogClaimFounder(string, address, address, string);\\n\\n    function mintFounder(string memory accPwdHash, address hWallet, string memory pattern)\\n    public\\n    onlyOwner\\n    {\\n        require(founder.owner() == address(this), \\\"Founder NFT contract owner is not current contract!\\\");\\n        users[accPwdHash].hardwareWallet = hWallet;\\n        emit LogClaimFounder(accPwdHash, _msgSender(), hWallet, pattern);\\n        founder.safeMint(hWallet, pattern);\\n    }\\n\\n    function mintingEvent(string memory accPwdHash, address hWallet, string memory pattern)\\n    external\\n    whenNotPaused\\n    onlyOwner\\n    {\\n        require(mintPass.owner() == address(this), \\\"Mint pass contract owner is not current contract!\\\");\\n        require(founder.owner() == address(this), \\\"Founder NFT contract owner is not current contract!\\\");\\n        //check mint pass claimed\\n        require(compareStr(users[accPwdHash].accPwdHash, accPwdHash), \\\"this account doesn't have mint pass\\\");\\n        //check membership claimed\\n        require(users[accPwdHash].hardwareWallet == address(0), \\\"this account has claimed membership\\\");\\n        burnMintPass(accPwdHash);\\n        mintFounder(accPwdHash, hWallet, pattern);\\n    }\\n\\n\\n    function transferMintPassContractOwner(address newOwner)\\n    external\\n    onlyOwner\\n    {\\n        require(mintPass.owner() == address(this), \\\"Mint pass contract owner is not current contract!\\\");\\n        mintPass.transferOwnership(newOwner);\\n    }\\n\\n    function transferFounderContractOwner(address newOwner)\\n    external\\n    onlyOwner\\n    {\\n        require(founder.owner() == address(this), \\\"Founder NFT contract owner is not current contract!\\\");\\n        founder.transferOwnership(newOwner);\\n    }\\n\\n    function hasMintPass(string memory accPwdHash)\\n    external\\n    view\\n    returns (bool)\\n    {\\n        return compareStr(users[accPwdHash].accPwdHash, accPwdHash);\\n    }\\n\\n    function hasFounderNFT(string memory accPwdHash)\\n    external\\n    view\\n    returns (bool)\\n    {\\n        return users[accPwdHash].hardwareWallet != address(0);\\n    }\\n\\n    function getMintPassTokenIds(string memory accPwdHash)\\n    external\\n    view\\n    returns (uint[] memory)\\n    {\\n        address owner = users[accPwdHash].softwareWallet;\\n        if (owner == address(0)) {\\n            return new uint[](0);\\n        }\\n        uint balance = mintPass.balanceOf(owner);\\n        uint[] memory tokenIds = new uint[](balance);\\n        for (uint i = 0; i < balance; i++) {\\n            tokenIds[i] = mintPass.tokenOfOwnerByIndex(owner, i);\\n        }\\n        return tokenIds;\\n    }\\n\\n    function getFounderTokenIds(string memory accPwdHash)\\n    external\\n    view\\n    returns (uint[] memory)\\n    {\\n        address owner = users[accPwdHash].hardwareWallet;\\n        if (owner == address(0)) {\\n            return new uint[](0);\\n        }\\n        uint balance = founder.balanceOf(owner);\\n        uint[] memory tokenIds = new uint[](balance);\\n        for (uint i = 0; i < balance; i++) {\\n            tokenIds[i] = founder.tokenOfOwnerByIndex(owner, i);\\n        }\\n        return tokenIds;\\n    }\\n\\n    function getBalance()\\n    public\\n    view\\n    returns (uint)\\n    {\\n        return address(this).balance;\\n    }\\n\\n    event LogWithdraw(address, uint);\\n\\n    function withdraw()\\n    external\\n    {\\n        require(address(this).balance > 0, \\\"Withdraw amount must be greater than 0\\\");\\n        require(_msgSender() != address(0), \\\"Invalid sender address 0\\\");\\n        require(withdrawAddress == _msgSender(), \\\"You don't have permission to withdraw\\\");\\n        emit LogWithdraw(_msgSender(), address(this).balance);\\n        payable(_msgSender()).transfer(address(this).balance);\\n    }\\n\\n    event LogChangeWithdrawAddress(address, address);\\n\\n    function changeWithdrawAddress(address _withdrawAddress)\\n    external\\n    whenNotPaused\\n    onlyOwner\\n    {\\n        emit LogChangeWithdrawAddress(withdrawAddress, _withdrawAddress);\\n        withdrawAddress = _withdrawAddress;\\n    }\\n\\n    event LogChangeMintPassPrice(address, uint);\\n\\n    function changeMintPassPrice(uint _price)\\n    external\\n    whenNotPaused\\n    onlyOwner\\n    {\\n        emit LogChangeMintPassPrice(_msgSender(), _price);\\n        mintPassPrice = _price;\\n    }\\n\\n    event LogChangeMintPassLimit(uint, uint);\\n\\n    function changeMintPassLimit(uint _limit)\\n    external\\n    whenNotPaused\\n    onlyOwner\\n    {\\n        emit LogChangeMintPassLimit(mintPassLimit, _limit);\\n        mintPassLimit = _limit;\\n    }\\n\\n    function changeMintPassAddress(address _newContractAddress)\\n    external\\n    whenNotPaused\\n    onlyOwner\\n    {\\n        mintPass = NFTMintPass(_newContractAddress);\\n    }\\n\\n    function changeFounderAddress(address _newContractAddress)\\n    external\\n    whenNotPaused\\n    onlyOwner\\n    {\\n        founder = NFTFounder(_newContractAddress);\\n    }\\n\\n    function pushUserData(string  memory accPwdHash, address sWallet, address hWallet)\\n    public\\n    whenNotPaused\\n    onlyOwner\\n    {\\n        accPwdHashArray.push(accPwdHash);\\n        users[accPwdHash] = User(accPwdHash, sWallet, hWallet);\\n    }\\n\\n\\n    function pause()\\n    public\\n    onlyOwner\\n    {\\n        _pause();\\n    }\\n\\n    function unpause()\\n    public\\n    onlyOwner\\n    {\\n        _unpause();\\n    }\\n\\n}\\n\",\"keccak256\":\"0x0371f13d1a0ba89b269c48ab054392fab2cefac710efe093752d09d538f8a508\",\"license\":\"MIT\"},\"contracts/NFTFounder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\n/// @custom:security-contact workbzw@outlook.com\\ncontract NFTFounder is ERC721, ERC721Enumerable, Pausable, Ownable, ERC721Burnable {\\n    using Counters for Counters.Counter;\\n\\n    mapping(uint => string) public pattern;\\n\\n    Counters.Counter private _tokenIdCounter;\\n\\n    constructor() ERC721(\\\"YOHAKU Founder\\\", \\\"YF\\\") {}\\n\\n    function _baseURI()\\n    internal\\n    pure\\n    override\\n    returns (string memory)\\n    {\\n        return \\\"https://yohaku.club/api/nft/metadata/founder/\\\";\\n    }\\n\\n    function pause()\\n    public\\n    onlyOwner\\n    {\\n        _pause();\\n    }\\n\\n    function unpause()\\n    public\\n    onlyOwner\\n    {\\n        _unpause();\\n    }\\n\\n    function safeMint(address to, string memory patternVid)\\n    public\\n    onlyOwner\\n    {\\n        uint256 tokenId = _tokenIdCounter.current();\\n        _tokenIdCounter.increment();\\n        _safeMint(to, tokenId);\\n        pattern[tokenId] = patternVid;\\n    }\\n\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId, uint256 batchSize)\\n    internal\\n    whenNotPaused\\n    override(ERC721, ERC721Enumerable)\\n    {\\n        super._beforeTokenTransfer(from, to, tokenId, batchSize);\\n    }\\n\\n    // The following functions are overrides required by Solidity.\\n\\n    function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    override(ERC721, ERC721Enumerable)\\n    returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n    // override transferFrom\\n    function transferFrom(address from, address to, uint256 tokenId)\\n    public\\n    override(ERC721, IERC721)\\n    onlyOwner\\n    {\\n        //super.transferFrom(from, to, tokenId);\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data)\\n    public\\n    virtual\\n    override(ERC721, IERC721)\\n    onlyOwner\\n    {\\n        //super.safeTransferFrom(from, to, tokenId, data);\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    function safeTransferFrom(address from, address to, uint256 tokenId)\\n    public\\n    virtual\\n    override(ERC721, IERC721)\\n    onlyOwner\\n    {\\n        //super.safeTransferFrom(from, to, tokenId, data);\\n        _safeTransfer(from, to, tokenId,\\\"\\\");\\n    }\\n\\n    function tokenURI(uint256 tokenId)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (string memory)\\n    {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, pattern[tokenId])) : \\\"\\\";\\n    }\\n\\n    function burn(uint256 tokenId)\\n    public\\n    virtual\\n    override(ERC721Burnable)\\n    onlyOwner\\n    {\\n        //solhint-disable-next-line max-line-length\\n        //require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _burn(tokenId);\\n    }\\n\\n    function approve(address, uint256)\\n    public\\n    virtual\\n    override(ERC721, IERC721)\\n    {\\n        revert(\\\"Approval function is disabled\\\");\\n    }\\n\\n    function setApprovalForAll(address, bool)\\n    public\\n    virtual\\n    override(ERC721, IERC721)\\n    {\\n        revert(\\\"SetApprovalForAll function is disabled\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x2291980fd12b9364456589a659cb83778547028ca04df3a57bba5d124b36df2a\",\"license\":\"MIT\"},\"contracts/NFTMintPass.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\n/// @custom:security-contact workbzw@outlook.com\\ncontract NFTMintPass is ERC721, ERC721Enumerable, Pausable, Ownable, ERC721Burnable {\\n    using Counters for Counters.Counter;\\n\\n    mapping(uint => string) public pattern;\\n\\n    Counters.Counter private _tokenIdCounter;\\n\\n    constructor() ERC721(\\\"YOHAKU Founder's Edition Mint Pass\\\", \\\"YFEMP\\\") {}\\n\\n    function _baseURI()\\n    internal\\n    pure\\n    override\\n    returns (string memory)\\n    {\\n        return \\\"https://yohaku.club/api/nft/metadata/mintpass/\\\";\\n    }\\n\\n    function pause()\\n    public\\n    onlyOwner\\n    {\\n        _pause();\\n    }\\n\\n    function unpause()\\n    public\\n    onlyOwner\\n    {\\n        _unpause();\\n    }\\n\\n    function safeMint(address to, string memory patternVid)\\n    public\\n    onlyOwner\\n    {\\n        uint256 tokenId = _tokenIdCounter.current();\\n        _tokenIdCounter.increment();\\n        _safeMint(to, tokenId);\\n        pattern[tokenId] = patternVid;\\n    }\\n\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId, uint256 batchSize)\\n    internal\\n    whenNotPaused\\n    override(ERC721, ERC721Enumerable)\\n    {\\n        super._beforeTokenTransfer(from, to, tokenId, batchSize);\\n    }\\n\\n    // The following functions are overrides required by Solidity.\\n\\n    function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    override(ERC721, ERC721Enumerable)\\n    returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n    // override transferFrom\\n    function transferFrom(address from, address to, uint256 tokenId)\\n    public\\n    override(ERC721, IERC721)\\n    onlyOwner\\n    {\\n        //super.transferFrom(from, to, tokenId);\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data)\\n    public\\n    virtual\\n    override(ERC721, IERC721)\\n    onlyOwner\\n    {\\n        //super.safeTransferFrom(from, to, tokenId, data);\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    function safeTransferFrom(address from, address to, uint256 tokenId)\\n    public\\n    virtual\\n    override(ERC721, IERC721)\\n    onlyOwner\\n    {\\n        //super.safeTransferFrom(from, to, tokenId, data);\\n        _safeTransfer(from, to, tokenId,\\\"\\\");\\n    }\\n\\n    function tokenURI(uint256 tokenId)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (string memory)\\n    {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, pattern[tokenId])) : \\\"\\\";\\n    }\\n\\n    function burn(uint256 tokenId)\\n    public\\n    virtual\\n    override(ERC721Burnable)\\n    onlyOwner\\n    {\\n        //solhint-disable-next-line max-line-length\\n        //require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _burn(tokenId);\\n    }\\n\\n    function approve(address, uint256)\\n    public\\n    virtual\\n    override(ERC721, IERC721)\\n    {\\n        revert(\\\"Approval function is disabled\\\");\\n    }\\n\\n    function setApprovalForAll(address, bool)\\n    public\\n    virtual\\n    override(ERC721, IERC721)\\n    {\\n        revert(\\\"SetApprovalForAll function is disabled\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x3c9701cfaf801a3882684d0e8621959d497efb853376d9b7ee8210fdf67381da\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620029b9380380620029b98339810160408190526200003491620000c9565b6200003f3362000079565b6000805460ff60a01b19169055600380546001600160a01b0319166001600160a01b0394909416939093179092556004556005556200010e565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080600060608486031215620000df57600080fd5b83516001600160a01b0381168114620000f757600080fd5b602085015160409095015190969495509392505050565b61289b806200011e6000396000f3fe6080604052600436106101e35760003560e01c80635d23cd08116101025780638da5cb5b11610095578063e477ef9711610064578063e477ef9714610577578063f2d75e8914610597578063f2fde38b146105b7578063f95d0d03146105d757600080fd5b80638da5cb5b146104f957806395d2557814610517578063c5a32eb214610537578063d78902ea1461055757600080fd5b8063749679c3116100d1578063749679c31461048e578063817645eb146104ae5780638456cb59146104ce5780638b496d4d146104e357600080fd5b80635d23cd081461040a578063689e1c031461042a578063715018a614610459578063732404221461046e57600080fd5b80632e2ea2791161017a5780633ccfd60b116101495780633ccfd60b146103a15780633f4ba83a146103b65780634d853ee5146103cb5780635c975abb146103eb57600080fd5b80632e2ea2791461030457806338151deb146103315780633ac7bfe8146103615780633ba5c1f01461038157600080fd5b806319a2dbe4116101b657806319a2dbe4146102775780632272df6714610297578063297bcc5c146102b75780632aff3f2f146102e457600080fd5b80630fc8096f146101e857806312065fe0146101fd5780631453671d1461021f5780631581b6001461023f575b600080fd5b6101fb6101f636600461225a565b6105ed565b005b34801561020957600080fd5b50475b6040519081526020015b60405180910390f35b34801561022b57600080fd5b506101fb61023a3660046122d3565b610a39565b34801561024b57600080fd5b5060035461025f906001600160a01b031681565b6040516001600160a01b039091168152602001610216565b34801561028357600080fd5b506101fb6102923660046122f7565b610ab2565b3480156102a357600080fd5b506101fb6102b23660046122d3565b610d5e565b3480156102c357600080fd5b506102d76102d236600461236f565b610d90565b60405161021691906123d8565b3480156102f057600080fd5b506101fb6102ff3660046122d3565b610e3c565b34801561031057600080fd5b5061032461031f3660046123eb565b610f3a565b6040516102169190612428565b34801561033d57600080fd5b5061035161034c3660046123eb565b611115565b6040519015158152602001610216565b34801561036d57600080fd5b506101fb61037c3660046122d3565b611130565b34801561038d57600080fd5b506101fb61039c3660046122f7565b611162565b3480156103ad57600080fd5b506101fb6112ec565b3480156103c257600080fd5b506101fb611471565b3480156103d757600080fd5b5060015461025f906001600160a01b031681565b3480156103f757600080fd5b50600054600160a01b900460ff16610351565b34801561041657600080fd5b506101fb6104253660046122d3565b611483565b34801561043657600080fd5b5061044a6104453660046123eb565b611550565b6040516102169392919061246c565b34801561046557600080fd5b506101fb611612565b34801561047a57600080fd5b506101fb61048936600461249f565b611624565b34801561049a57600080fd5b5060025461025f906001600160a01b031681565b3480156104ba57600080fd5b506101fb6104c93660046123eb565b61170c565b3480156104da57600080fd5b506101fb61193a565b3480156104ef57600080fd5b5061020c60045481565b34801561050557600080fd5b506000546001600160a01b031661025f565b34801561052357600080fd5b506101fb61053236600461236f565b61194a565b34801561054357600080fd5b506101fb61055236600461236f565b6119a2565b34801561056357600080fd5b506103246105723660046123eb565b6119f3565b34801561058357600080fd5b506103516105923660046123eb565b611b98565b3480156105a357600080fd5b506101fb6105b23660046122f7565b611bd8565b3480156105c357600080fd5b506101fb6105d23660046122d3565b611f09565b3480156105e357600080fd5b5061020c60055481565b6105f5611f7f565b60025460408051638da5cb5b60e01b8152905130926001600160a01b031691638da5cb5b9160048083019260209291908290030181865afa15801561063e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106629190612503565b6001600160a01b0316146106915760405162461bcd60e51b815260040161068890612520565b60405180910390fd5b6004543410156106d45760405162461bcd60e51b815260206004820152600e60248201526d50726963652069732077726f6e6760901b6044820152606401610688565b3361071a5760405162461bcd60e51b8152602060048201526016602482015275496e76616c69642073656e646572206164647265737360501b6044820152606401610688565b600554600260009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610770573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107949190612571565b106107b15760405162461bcd60e51b81526004016106889061258a565b6108626006836040516107c491906125cb565b90815260405190819003602001902080546107de906125e7565b80601f016020809104026020016040519081016040528092919081815260200182805461080a906125e7565b80156108575780601f1061082c57610100808354040283529160200191610857565b820191906000526020600020905b81548152906001019060200180831161083a57829003601f168201915b505050505083611fcc565b156108c35760405162461bcd60e51b815260206004820152602b60248201527f54686973206163636f756e742068617320636c61696d6564206d696e7420706160448201526a737320726563656e746c7960a81b6064820152608401610688565b7ff5a22f8701b10682fe480d99e8b0dce28f0415f08aad7255cf7dbb7277d965948233336040516108f69392919061246c565b60405180910390a160405180606001604052808381526020016109163390565b6001600160a01b03168152600060209091015260405160069061093a9085906125cb565b908152604051908190036020019020815181906109579082612667565b506020820151600180830180546001600160a01b039384166001600160a01b0319918216179091556040909401516002909301805493909216929093169190911790556007805491820181556000527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c688016109d28382612667565b506002546001600160a01b031663d204c45e33836040518363ffffffff1660e01b8152600401610a03929190612727565b600060405180830381600087803b158015610a1d57600080fd5b505af1158015610a31573d6000803e3d6000fd5b505050505050565b610a41611f7f565b610a49612025565b600354604080516001600160a01b03928316815291831660208301527f1366b6126a67fc1add198ab67f11327df07ee74ddd890394b268c841e29dbd7d910160405180910390a1600380546001600160a01b0319166001600160a01b0392909216919091179055565b610aba611f7f565b610ac2612025565b60025460408051638da5cb5b60e01b8152905130926001600160a01b031691638da5cb5b9160048083019260209291908290030181865afa158015610b0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2f9190612503565b6001600160a01b031614610b555760405162461bcd60e51b815260040161068890612520565b60015460408051638da5cb5b60e01b8152905130926001600160a01b031691638da5cb5b9160048083019260209291908290030181865afa158015610b9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc29190612503565b6001600160a01b031614610be85760405162461bcd60e51b81526004016106889061274b565b610c99600684604051610bfb91906125cb565b9081526040519081900360200190208054610c15906125e7565b80601f0160208091040260200160405190810160405280929190818152602001828054610c41906125e7565b8015610c8e5780601f10610c6357610100808354040283529160200191610c8e565b820191906000526020600020905b815481529060010190602001808311610c7157829003601f168201915b505050505084611fcc565b610cb55760405162461bcd60e51b81526004016106889061279e565b60006001600160a01b0316600684604051610cd091906125cb565b908152604051908190036020019020600201546001600160a01b031614610d455760405162461bcd60e51b815260206004820152602360248201527f74686973206163636f756e742068617320636c61696d6564206d656d6265727360448201526206869760ec1b6064820152608401610688565b610d4e8361170c565b610d59838383611162565b505050565b610d66611f7f565b610d6e612025565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b60078181548110610da057600080fd5b906000526020600020016000915090508054610dbb906125e7565b80601f0160208091040260200160405190810160405280929190818152602001828054610de7906125e7565b8015610e345780601f10610e0957610100808354040283529160200191610e34565b820191906000526020600020905b815481529060010190602001808311610e1757829003601f168201915b505050505081565b610e44612025565b60025460408051638da5cb5b60e01b8152905130926001600160a01b031691638da5cb5b9160048083019260209291908290030181865afa158015610e8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb19190612503565b6001600160a01b031614610ed75760405162461bcd60e51b815260040161068890612520565b60025460405163f2fde38b60e01b81526001600160a01b0383811660048301529091169063f2fde38b906024015b600060405180830381600087803b158015610f1f57600080fd5b505af1158015610f33573d6000803e3d6000fd5b5050505050565b60606000600683604051610f4e91906125cb565b908152604051908190036020019020600101546001600160a01b0316905080610fa55760005b604051908082528060200260200182016040528015610f9d578160200160208202803683370190505b509392505050565b6002546040516370a0823160e01b81526001600160a01b03838116600483015260009216906370a0823190602401602060405180830381865afa158015610ff0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110149190612571565b905060008167ffffffffffffffff811115611031576110316121b7565b60405190808252806020026020018201604052801561105a578160200160208202803683370190505b50905060005b8281101561110c57600254604051632f745c5960e01b81526001600160a01b0386811660048301526024820184905290911690632f745c5990604401602060405180830381865afa1580156110b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110dd9190612571565b8282815181106110ef576110ef6127e1565b602090810291909101015280611104816127f7565b915050611060565b50949350505050565b600061112a6006836040516107c491906125cb565b92915050565b611138611f7f565b611140612025565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b61116a612025565b60015460408051638da5cb5b60e01b8152905130926001600160a01b031691638da5cb5b9160048083019260209291908290030181865afa1580156111b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d79190612503565b6001600160a01b0316146111fd5760405162461bcd60e51b81526004016106889061274b565b8160068460405161120e91906125cb565b90815260405190819003602001902060020180546001600160a01b03929092166001600160a01b03199092169190911790557f760baae4d6bf4ebc21144103f6679580efbbabcc597118b9ffa838aaf358c235836112693390565b848460405161127b949392919061281e565b60405180910390a1600154604051636902622f60e11b81526001600160a01b039091169063d204c45e906112b59085908590600401612727565b600060405180830381600087803b1580156112cf57600080fd5b505af11580156112e3573d6000803e3d6000fd5b50505050505050565b6000471161134b5760405162461bcd60e51b815260206004820152602660248201527f576974686472617720616d6f756e74206d75737420626520677265617465722060448201526507468616e20360d41b6064820152608401610688565b336113985760405162461bcd60e51b815260206004820152601860248201527f496e76616c69642073656e6465722061646472657373203000000000000000006044820152606401610688565b6003546001600160a01b031633146114005760405162461bcd60e51b815260206004820152602560248201527f596f7520646f6e27742068617665207065726d697373696f6e20746f20776974604482015264686472617760d81b6064820152608401610688565b7f4ce7033d118120e254016dccf195288400b28fc8936425acd5f17ce2df3ab70833604080516001600160a01b0390921682524760208301520160405180910390a160405133904780156108fc02916000818181858888f1935050505015801561146e573d6000803e3d6000fd5b50565b611479612025565b61148161207f565b565b61148b612025565b60015460408051638da5cb5b60e01b8152905130926001600160a01b031691638da5cb5b9160048083019260209291908290030181865afa1580156114d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f89190612503565b6001600160a01b03161461151e5760405162461bcd60e51b81526004016106889061274b565b60015460405163f2fde38b60e01b81526001600160a01b0383811660048301529091169063f2fde38b90602401610f05565b8051602081830181018051600682529282019190930120915280548190611576906125e7565b80601f01602080910402602001604051908101604052809291908181526020018280546115a2906125e7565b80156115ef5780601f106115c4576101008083540402835291602001916115ef565b820191906000526020600020905b8154815290600101906020018083116115d257829003601f168201915b50505050600183015460029093015491926001600160a01b039081169216905083565b61161a612025565b61148160006120d4565b61162c611f7f565b611634612025565b600780546001810182556000919091527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c688016116708482612667565b506040518060600160405280848152602001836001600160a01b03168152602001826001600160a01b03168152506006846040516116ae91906125cb565b908152604051908190036020019020815181906116cb9082612667565b5060208201516001820180546001600160a01b03199081166001600160a01b0393841617909155604090930151600290920180549093169116179055505050565b611714612025565b60025460408051638da5cb5b60e01b8152905130926001600160a01b031691638da5cb5b9160048083019260209291908290030181865afa15801561175d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117819190612503565b6001600160a01b0316146117a75760405162461bcd60e51b815260040161068890612520565b60006006826040516117b991906125cb565b908152604051908190036020018120600101546002546370a0823160e01b83526001600160a01b039182166004840181905293506000929116906370a0823190602401602060405180830381865afa158015611819573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061183d9190612571565b90506000811161185f5760405162461bcd60e51b81526004016106889061279e565b600254604051632f745c5960e01b81526001600160a01b038481166004830152600060248301819052921690632f745c5990604401602060405180830381865afa1580156118b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118d59190612571565b600254604051630852cd8d60e31b8152600481018390529192506001600160a01b0316906342966c6890602401600060405180830381600087803b15801561191c57600080fd5b505af1158015611930573d6000803e3d6000fd5b5050505050505050565b611942612025565b611481612124565b611952611f7f565b61195a612025565b7fc003a075eab62a1cdfa9ff346142326cedc7647878707a2f252cbe769ae885dc33604080516001600160a01b039092168252602082018490520160405180910390a1600455565b6119aa611f7f565b6119b2612025565b60055460408051918252602082018390527f95a493dc2389bd4bf561dbb4113697e13067e9e4562c1442313108500e52f6a4910160405180910390a1600555565b60606000600683604051611a0791906125cb565b908152604051908190036020019020600201546001600160a01b0316905080611a31576000610f74565b6001546040516370a0823160e01b81526001600160a01b03838116600483015260009216906370a0823190602401602060405180830381865afa158015611a7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aa09190612571565b905060008167ffffffffffffffff811115611abd57611abd6121b7565b604051908082528060200260200182016040528015611ae6578160200160208202803683370190505b50905060005b8281101561110c57600154604051632f745c5960e01b81526001600160a01b0386811660048301526024820184905290911690632f745c5990604401602060405180830381865afa158015611b45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b699190612571565b828281518110611b7b57611b7b6127e1565b602090810291909101015280611b90816127f7565b915050611aec565b6000806001600160a01b0316600683604051611bb491906125cb565b908152604051908190036020019020600201546001600160a01b0316141592915050565b611be0611f7f565b611be8612025565b6001600160a01b038216611c335760405162461bcd60e51b8152602060048201526012602482015271496e76616c696420746f206164647265737360701b6044820152606401610688565b611c46600684604051610bfb91906125cb565b15611ca75760405162461bcd60e51b815260206004820152602b60248201527f74686973206163636f756e742068617320636c61696d6564206d696e7420706160448201526a737320726563656e746c7960a81b6064820152608401610688565b600554600260009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611cfd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d219190612571565b10611d3e5760405162461bcd60e51b81526004016106889061258a565b60025460408051638da5cb5b60e01b8152905130926001600160a01b031691638da5cb5b9160048083019260209291908290030181865afa158015611d87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dab9190612503565b6001600160a01b031614611dd15760405162461bcd60e51b815260040161068890612520565b7f5ba5bc2a3f0d175c8995c9c7c51be858a905bf3e606464ca62e2962cad38439b833384604051611e049392919061246c565b60405180910390a1604080516060810182528481526001600160a01b03841660208201526000818301529051600690611e3e9086906125cb565b90815260405190819003602001902081518190611e5b9082612667565b506020820151600180830180546001600160a01b039384166001600160a01b0319918216179091556040909401516002909301805493909216929093169190911790556007805491820181556000527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68801611ed68482612667565b50600254604051636902622f60e11b81526001600160a01b039091169063d204c45e906112b59085908590600401612727565b611f11612025565b6001600160a01b038116611f765760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610688565b61146e816120d4565b600054600160a01b900460ff16156114815760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610688565b600081604051602001611fdf91906125cb565b604051602081830303815290604052805190602001208360405160200161200691906125cb565b6040516020818303038152906040528051906020012014905092915050565b6000546001600160a01b031633146114815760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610688565b612087612167565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61212c611f7f565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586120b73390565b600054600160a01b900460ff166114815760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610688565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126121de57600080fd5b813567ffffffffffffffff808211156121f9576121f96121b7565b604051601f8301601f19908116603f01168101908282118183101715612221576122216121b7565b8160405283815286602085880101111561223a57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806040838503121561226d57600080fd5b823567ffffffffffffffff8082111561228557600080fd5b612291868387016121cd565b935060208501359150808211156122a757600080fd5b506122b4858286016121cd565b9150509250929050565b6001600160a01b038116811461146e57600080fd5b6000602082840312156122e557600080fd5b81356122f0816122be565b9392505050565b60008060006060848603121561230c57600080fd5b833567ffffffffffffffff8082111561232457600080fd5b612330878388016121cd565b945060208601359150612342826122be565b9092506040850135908082111561235857600080fd5b50612365868287016121cd565b9150509250925092565b60006020828403121561238157600080fd5b5035919050565b60005b838110156123a357818101518382015260200161238b565b50506000910152565b600081518084526123c4816020860160208601612388565b601f01601f19169290920160200192915050565b6020815260006122f060208301846123ac565b6000602082840312156123fd57600080fd5b813567ffffffffffffffff81111561241457600080fd5b612420848285016121cd565b949350505050565b6020808252825182820181905260009190848201906040850190845b8181101561246057835183529284019291840191600101612444565b50909695505050505050565b60608152600061247f60608301866123ac565b6001600160a01b0394851660208401529290931660409091015292915050565b6000806000606084860312156124b457600080fd5b833567ffffffffffffffff8111156124cb57600080fd5b6124d7868287016121cd565b93505060208401356124e8816122be565b915060408401356124f8816122be565b809150509250925092565b60006020828403121561251557600080fd5b81516122f0816122be565b60208082526031908201527f4d696e74207061737320636f6e7472616374206f776e6572206973206e6f742060408201527063757272656e7420636f6e74726163742160781b606082015260800190565b60006020828403121561258357600080fd5b5051919050565b60208082526021908201527f4d696e74207061737320746f74616c20737570706c79206973206c696d6974656040820152601960fa1b606082015260800190565b600082516125dd818460208701612388565b9190910192915050565b600181811c908216806125fb57607f821691505b60208210810361261b57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610d5957600081815260208120601f850160051c810160208610156126485750805b601f850160051c820191505b81811015610a3157828155600101612654565b815167ffffffffffffffff811115612681576126816121b7565b6126958161268f84546125e7565b84612621565b602080601f8311600181146126ca57600084156126b25750858301515b600019600386901b1c1916600185901b178555610a31565b600085815260208120601f198616915b828110156126f9578886015182559484019460019091019084016126da565b50858210156127175787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6001600160a01b0383168152604060208201819052600090612420908301846123ac565b60208082526033908201527f466f756e646572204e465420636f6e7472616374206f776e6572206973206e6f604082015272742063757272656e7420636f6e74726163742160681b606082015260800190565b60208082526023908201527f74686973206163636f756e7420646f65736e27742068617665206d696e74207060408201526261737360e81b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b60006001820161281757634e487b7160e01b600052601160045260246000fd5b5060010190565b60808152600061283160808301876123ac565b6001600160a01b03868116602085015285166040840152828103606084015261285a81856123ac565b97965050505050505056fea2646970667358221220e13e2a06ba712a7c4dd7971ab59397a38b521504efb344e9a6478e6b8a7e5b1e64736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106101e35760003560e01c80635d23cd08116101025780638da5cb5b11610095578063e477ef9711610064578063e477ef9714610577578063f2d75e8914610597578063f2fde38b146105b7578063f95d0d03146105d757600080fd5b80638da5cb5b146104f957806395d2557814610517578063c5a32eb214610537578063d78902ea1461055757600080fd5b8063749679c3116100d1578063749679c31461048e578063817645eb146104ae5780638456cb59146104ce5780638b496d4d146104e357600080fd5b80635d23cd081461040a578063689e1c031461042a578063715018a614610459578063732404221461046e57600080fd5b80632e2ea2791161017a5780633ccfd60b116101495780633ccfd60b146103a15780633f4ba83a146103b65780634d853ee5146103cb5780635c975abb146103eb57600080fd5b80632e2ea2791461030457806338151deb146103315780633ac7bfe8146103615780633ba5c1f01461038157600080fd5b806319a2dbe4116101b657806319a2dbe4146102775780632272df6714610297578063297bcc5c146102b75780632aff3f2f146102e457600080fd5b80630fc8096f146101e857806312065fe0146101fd5780631453671d1461021f5780631581b6001461023f575b600080fd5b6101fb6101f636600461225a565b6105ed565b005b34801561020957600080fd5b50475b6040519081526020015b60405180910390f35b34801561022b57600080fd5b506101fb61023a3660046122d3565b610a39565b34801561024b57600080fd5b5060035461025f906001600160a01b031681565b6040516001600160a01b039091168152602001610216565b34801561028357600080fd5b506101fb6102923660046122f7565b610ab2565b3480156102a357600080fd5b506101fb6102b23660046122d3565b610d5e565b3480156102c357600080fd5b506102d76102d236600461236f565b610d90565b60405161021691906123d8565b3480156102f057600080fd5b506101fb6102ff3660046122d3565b610e3c565b34801561031057600080fd5b5061032461031f3660046123eb565b610f3a565b6040516102169190612428565b34801561033d57600080fd5b5061035161034c3660046123eb565b611115565b6040519015158152602001610216565b34801561036d57600080fd5b506101fb61037c3660046122d3565b611130565b34801561038d57600080fd5b506101fb61039c3660046122f7565b611162565b3480156103ad57600080fd5b506101fb6112ec565b3480156103c257600080fd5b506101fb611471565b3480156103d757600080fd5b5060015461025f906001600160a01b031681565b3480156103f757600080fd5b50600054600160a01b900460ff16610351565b34801561041657600080fd5b506101fb6104253660046122d3565b611483565b34801561043657600080fd5b5061044a6104453660046123eb565b611550565b6040516102169392919061246c565b34801561046557600080fd5b506101fb611612565b34801561047a57600080fd5b506101fb61048936600461249f565b611624565b34801561049a57600080fd5b5060025461025f906001600160a01b031681565b3480156104ba57600080fd5b506101fb6104c93660046123eb565b61170c565b3480156104da57600080fd5b506101fb61193a565b3480156104ef57600080fd5b5061020c60045481565b34801561050557600080fd5b506000546001600160a01b031661025f565b34801561052357600080fd5b506101fb61053236600461236f565b61194a565b34801561054357600080fd5b506101fb61055236600461236f565b6119a2565b34801561056357600080fd5b506103246105723660046123eb565b6119f3565b34801561058357600080fd5b506103516105923660046123eb565b611b98565b3480156105a357600080fd5b506101fb6105b23660046122f7565b611bd8565b3480156105c357600080fd5b506101fb6105d23660046122d3565b611f09565b3480156105e357600080fd5b5061020c60055481565b6105f5611f7f565b60025460408051638da5cb5b60e01b8152905130926001600160a01b031691638da5cb5b9160048083019260209291908290030181865afa15801561063e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106629190612503565b6001600160a01b0316146106915760405162461bcd60e51b815260040161068890612520565b60405180910390fd5b6004543410156106d45760405162461bcd60e51b815260206004820152600e60248201526d50726963652069732077726f6e6760901b6044820152606401610688565b3361071a5760405162461bcd60e51b8152602060048201526016602482015275496e76616c69642073656e646572206164647265737360501b6044820152606401610688565b600554600260009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610770573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107949190612571565b106107b15760405162461bcd60e51b81526004016106889061258a565b6108626006836040516107c491906125cb565b90815260405190819003602001902080546107de906125e7565b80601f016020809104026020016040519081016040528092919081815260200182805461080a906125e7565b80156108575780601f1061082c57610100808354040283529160200191610857565b820191906000526020600020905b81548152906001019060200180831161083a57829003601f168201915b505050505083611fcc565b156108c35760405162461bcd60e51b815260206004820152602b60248201527f54686973206163636f756e742068617320636c61696d6564206d696e7420706160448201526a737320726563656e746c7960a81b6064820152608401610688565b7ff5a22f8701b10682fe480d99e8b0dce28f0415f08aad7255cf7dbb7277d965948233336040516108f69392919061246c565b60405180910390a160405180606001604052808381526020016109163390565b6001600160a01b03168152600060209091015260405160069061093a9085906125cb565b908152604051908190036020019020815181906109579082612667565b506020820151600180830180546001600160a01b039384166001600160a01b0319918216179091556040909401516002909301805493909216929093169190911790556007805491820181556000527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c688016109d28382612667565b506002546001600160a01b031663d204c45e33836040518363ffffffff1660e01b8152600401610a03929190612727565b600060405180830381600087803b158015610a1d57600080fd5b505af1158015610a31573d6000803e3d6000fd5b505050505050565b610a41611f7f565b610a49612025565b600354604080516001600160a01b03928316815291831660208301527f1366b6126a67fc1add198ab67f11327df07ee74ddd890394b268c841e29dbd7d910160405180910390a1600380546001600160a01b0319166001600160a01b0392909216919091179055565b610aba611f7f565b610ac2612025565b60025460408051638da5cb5b60e01b8152905130926001600160a01b031691638da5cb5b9160048083019260209291908290030181865afa158015610b0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2f9190612503565b6001600160a01b031614610b555760405162461bcd60e51b815260040161068890612520565b60015460408051638da5cb5b60e01b8152905130926001600160a01b031691638da5cb5b9160048083019260209291908290030181865afa158015610b9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc29190612503565b6001600160a01b031614610be85760405162461bcd60e51b81526004016106889061274b565b610c99600684604051610bfb91906125cb565b9081526040519081900360200190208054610c15906125e7565b80601f0160208091040260200160405190810160405280929190818152602001828054610c41906125e7565b8015610c8e5780601f10610c6357610100808354040283529160200191610c8e565b820191906000526020600020905b815481529060010190602001808311610c7157829003601f168201915b505050505084611fcc565b610cb55760405162461bcd60e51b81526004016106889061279e565b60006001600160a01b0316600684604051610cd091906125cb565b908152604051908190036020019020600201546001600160a01b031614610d455760405162461bcd60e51b815260206004820152602360248201527f74686973206163636f756e742068617320636c61696d6564206d656d6265727360448201526206869760ec1b6064820152608401610688565b610d4e8361170c565b610d59838383611162565b505050565b610d66611f7f565b610d6e612025565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b60078181548110610da057600080fd5b906000526020600020016000915090508054610dbb906125e7565b80601f0160208091040260200160405190810160405280929190818152602001828054610de7906125e7565b8015610e345780601f10610e0957610100808354040283529160200191610e34565b820191906000526020600020905b815481529060010190602001808311610e1757829003601f168201915b505050505081565b610e44612025565b60025460408051638da5cb5b60e01b8152905130926001600160a01b031691638da5cb5b9160048083019260209291908290030181865afa158015610e8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb19190612503565b6001600160a01b031614610ed75760405162461bcd60e51b815260040161068890612520565b60025460405163f2fde38b60e01b81526001600160a01b0383811660048301529091169063f2fde38b906024015b600060405180830381600087803b158015610f1f57600080fd5b505af1158015610f33573d6000803e3d6000fd5b5050505050565b60606000600683604051610f4e91906125cb565b908152604051908190036020019020600101546001600160a01b0316905080610fa55760005b604051908082528060200260200182016040528015610f9d578160200160208202803683370190505b509392505050565b6002546040516370a0823160e01b81526001600160a01b03838116600483015260009216906370a0823190602401602060405180830381865afa158015610ff0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110149190612571565b905060008167ffffffffffffffff811115611031576110316121b7565b60405190808252806020026020018201604052801561105a578160200160208202803683370190505b50905060005b8281101561110c57600254604051632f745c5960e01b81526001600160a01b0386811660048301526024820184905290911690632f745c5990604401602060405180830381865afa1580156110b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110dd9190612571565b8282815181106110ef576110ef6127e1565b602090810291909101015280611104816127f7565b915050611060565b50949350505050565b600061112a6006836040516107c491906125cb565b92915050565b611138611f7f565b611140612025565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b61116a612025565b60015460408051638da5cb5b60e01b8152905130926001600160a01b031691638da5cb5b9160048083019260209291908290030181865afa1580156111b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d79190612503565b6001600160a01b0316146111fd5760405162461bcd60e51b81526004016106889061274b565b8160068460405161120e91906125cb565b90815260405190819003602001902060020180546001600160a01b03929092166001600160a01b03199092169190911790557f760baae4d6bf4ebc21144103f6679580efbbabcc597118b9ffa838aaf358c235836112693390565b848460405161127b949392919061281e565b60405180910390a1600154604051636902622f60e11b81526001600160a01b039091169063d204c45e906112b59085908590600401612727565b600060405180830381600087803b1580156112cf57600080fd5b505af11580156112e3573d6000803e3d6000fd5b50505050505050565b6000471161134b5760405162461bcd60e51b815260206004820152602660248201527f576974686472617720616d6f756e74206d75737420626520677265617465722060448201526507468616e20360d41b6064820152608401610688565b336113985760405162461bcd60e51b815260206004820152601860248201527f496e76616c69642073656e6465722061646472657373203000000000000000006044820152606401610688565b6003546001600160a01b031633146114005760405162461bcd60e51b815260206004820152602560248201527f596f7520646f6e27742068617665207065726d697373696f6e20746f20776974604482015264686472617760d81b6064820152608401610688565b7f4ce7033d118120e254016dccf195288400b28fc8936425acd5f17ce2df3ab70833604080516001600160a01b0390921682524760208301520160405180910390a160405133904780156108fc02916000818181858888f1935050505015801561146e573d6000803e3d6000fd5b50565b611479612025565b61148161207f565b565b61148b612025565b60015460408051638da5cb5b60e01b8152905130926001600160a01b031691638da5cb5b9160048083019260209291908290030181865afa1580156114d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f89190612503565b6001600160a01b03161461151e5760405162461bcd60e51b81526004016106889061274b565b60015460405163f2fde38b60e01b81526001600160a01b0383811660048301529091169063f2fde38b90602401610f05565b8051602081830181018051600682529282019190930120915280548190611576906125e7565b80601f01602080910402602001604051908101604052809291908181526020018280546115a2906125e7565b80156115ef5780601f106115c4576101008083540402835291602001916115ef565b820191906000526020600020905b8154815290600101906020018083116115d257829003601f168201915b50505050600183015460029093015491926001600160a01b039081169216905083565b61161a612025565b61148160006120d4565b61162c611f7f565b611634612025565b600780546001810182556000919091527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c688016116708482612667565b506040518060600160405280848152602001836001600160a01b03168152602001826001600160a01b03168152506006846040516116ae91906125cb565b908152604051908190036020019020815181906116cb9082612667565b5060208201516001820180546001600160a01b03199081166001600160a01b0393841617909155604090930151600290920180549093169116179055505050565b611714612025565b60025460408051638da5cb5b60e01b8152905130926001600160a01b031691638da5cb5b9160048083019260209291908290030181865afa15801561175d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117819190612503565b6001600160a01b0316146117a75760405162461bcd60e51b815260040161068890612520565b60006006826040516117b991906125cb565b908152604051908190036020018120600101546002546370a0823160e01b83526001600160a01b039182166004840181905293506000929116906370a0823190602401602060405180830381865afa158015611819573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061183d9190612571565b90506000811161185f5760405162461bcd60e51b81526004016106889061279e565b600254604051632f745c5960e01b81526001600160a01b038481166004830152600060248301819052921690632f745c5990604401602060405180830381865afa1580156118b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118d59190612571565b600254604051630852cd8d60e31b8152600481018390529192506001600160a01b0316906342966c6890602401600060405180830381600087803b15801561191c57600080fd5b505af1158015611930573d6000803e3d6000fd5b5050505050505050565b611942612025565b611481612124565b611952611f7f565b61195a612025565b7fc003a075eab62a1cdfa9ff346142326cedc7647878707a2f252cbe769ae885dc33604080516001600160a01b039092168252602082018490520160405180910390a1600455565b6119aa611f7f565b6119b2612025565b60055460408051918252602082018390527f95a493dc2389bd4bf561dbb4113697e13067e9e4562c1442313108500e52f6a4910160405180910390a1600555565b60606000600683604051611a0791906125cb565b908152604051908190036020019020600201546001600160a01b0316905080611a31576000610f74565b6001546040516370a0823160e01b81526001600160a01b03838116600483015260009216906370a0823190602401602060405180830381865afa158015611a7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aa09190612571565b905060008167ffffffffffffffff811115611abd57611abd6121b7565b604051908082528060200260200182016040528015611ae6578160200160208202803683370190505b50905060005b8281101561110c57600154604051632f745c5960e01b81526001600160a01b0386811660048301526024820184905290911690632f745c5990604401602060405180830381865afa158015611b45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b699190612571565b828281518110611b7b57611b7b6127e1565b602090810291909101015280611b90816127f7565b915050611aec565b6000806001600160a01b0316600683604051611bb491906125cb565b908152604051908190036020019020600201546001600160a01b0316141592915050565b611be0611f7f565b611be8612025565b6001600160a01b038216611c335760405162461bcd60e51b8152602060048201526012602482015271496e76616c696420746f206164647265737360701b6044820152606401610688565b611c46600684604051610bfb91906125cb565b15611ca75760405162461bcd60e51b815260206004820152602b60248201527f74686973206163636f756e742068617320636c61696d6564206d696e7420706160448201526a737320726563656e746c7960a81b6064820152608401610688565b600554600260009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611cfd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d219190612571565b10611d3e5760405162461bcd60e51b81526004016106889061258a565b60025460408051638da5cb5b60e01b8152905130926001600160a01b031691638da5cb5b9160048083019260209291908290030181865afa158015611d87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dab9190612503565b6001600160a01b031614611dd15760405162461bcd60e51b815260040161068890612520565b7f5ba5bc2a3f0d175c8995c9c7c51be858a905bf3e606464ca62e2962cad38439b833384604051611e049392919061246c565b60405180910390a1604080516060810182528481526001600160a01b03841660208201526000818301529051600690611e3e9086906125cb565b90815260405190819003602001902081518190611e5b9082612667565b506020820151600180830180546001600160a01b039384166001600160a01b0319918216179091556040909401516002909301805493909216929093169190911790556007805491820181556000527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68801611ed68482612667565b50600254604051636902622f60e11b81526001600160a01b039091169063d204c45e906112b59085908590600401612727565b611f11612025565b6001600160a01b038116611f765760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610688565b61146e816120d4565b600054600160a01b900460ff16156114815760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610688565b600081604051602001611fdf91906125cb565b604051602081830303815290604052805190602001208360405160200161200691906125cb565b6040516020818303038152906040528051906020012014905092915050565b6000546001600160a01b031633146114815760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610688565b612087612167565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61212c611f7f565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586120b73390565b600054600160a01b900460ff166114815760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610688565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126121de57600080fd5b813567ffffffffffffffff808211156121f9576121f96121b7565b604051601f8301601f19908116603f01168101908282118183101715612221576122216121b7565b8160405283815286602085880101111561223a57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806040838503121561226d57600080fd5b823567ffffffffffffffff8082111561228557600080fd5b612291868387016121cd565b935060208501359150808211156122a757600080fd5b506122b4858286016121cd565b9150509250929050565b6001600160a01b038116811461146e57600080fd5b6000602082840312156122e557600080fd5b81356122f0816122be565b9392505050565b60008060006060848603121561230c57600080fd5b833567ffffffffffffffff8082111561232457600080fd5b612330878388016121cd565b945060208601359150612342826122be565b9092506040850135908082111561235857600080fd5b50612365868287016121cd565b9150509250925092565b60006020828403121561238157600080fd5b5035919050565b60005b838110156123a357818101518382015260200161238b565b50506000910152565b600081518084526123c4816020860160208601612388565b601f01601f19169290920160200192915050565b6020815260006122f060208301846123ac565b6000602082840312156123fd57600080fd5b813567ffffffffffffffff81111561241457600080fd5b612420848285016121cd565b949350505050565b6020808252825182820181905260009190848201906040850190845b8181101561246057835183529284019291840191600101612444565b50909695505050505050565b60608152600061247f60608301866123ac565b6001600160a01b0394851660208401529290931660409091015292915050565b6000806000606084860312156124b457600080fd5b833567ffffffffffffffff8111156124cb57600080fd5b6124d7868287016121cd565b93505060208401356124e8816122be565b915060408401356124f8816122be565b809150509250925092565b60006020828403121561251557600080fd5b81516122f0816122be565b60208082526031908201527f4d696e74207061737320636f6e7472616374206f776e6572206973206e6f742060408201527063757272656e7420636f6e74726163742160781b606082015260800190565b60006020828403121561258357600080fd5b5051919050565b60208082526021908201527f4d696e74207061737320746f74616c20737570706c79206973206c696d6974656040820152601960fa1b606082015260800190565b600082516125dd818460208701612388565b9190910192915050565b600181811c908216806125fb57607f821691505b60208210810361261b57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610d5957600081815260208120601f850160051c810160208610156126485750805b601f850160051c820191505b81811015610a3157828155600101612654565b815167ffffffffffffffff811115612681576126816121b7565b6126958161268f84546125e7565b84612621565b602080601f8311600181146126ca57600084156126b25750858301515b600019600386901b1c1916600185901b178555610a31565b600085815260208120601f198616915b828110156126f9578886015182559484019460019091019084016126da565b50858210156127175787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6001600160a01b0383168152604060208201819052600090612420908301846123ac565b60208082526033908201527f466f756e646572204e465420636f6e7472616374206f776e6572206973206e6f604082015272742063757272656e7420636f6e74726163742160681b606082015260800190565b60208082526023908201527f74686973206163636f756e7420646f65736e27742068617665206d696e74207060408201526261737360e81b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b60006001820161281757634e487b7160e01b600052601160045260246000fd5b5060010190565b60808152600061283160808301876123ac565b6001600160a01b03868116602085015285166040840152828103606084015261285a81856123ac565b97965050505050505056fea2646970667358221220e13e2a06ba712a7c4dd7971ab59397a38b521504efb344e9a6478e6b8a7e5b1e64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Logic.sol:Logic",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/Logic.sol:Logic",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3255,
        "contract": "contracts/Logic.sol:Logic",
        "label": "founder",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(NFTFounder)4463"
      },
      {
        "astId": 3258,
        "contract": "contracts/Logic.sol:Logic",
        "label": "mintPass",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(NFTMintPass)4752"
      },
      {
        "astId": 3260,
        "contract": "contracts/Logic.sol:Logic",
        "label": "withdrawAddress",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 3262,
        "contract": "contracts/Logic.sol:Logic",
        "label": "mintPassPrice",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 3264,
        "contract": "contracts/Logic.sol:Logic",
        "label": "mintPassLimit",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 3298,
        "contract": "contracts/Logic.sol:Logic",
        "label": "users",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_string_memory_ptr,t_struct(User)3293_storage)"
      },
      {
        "astId": 3407,
        "contract": "contracts/Logic.sol:Logic",
        "label": "accPwdHashArray",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_string_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(NFTFounder)4463": {
        "encoding": "inplace",
        "label": "contract NFTFounder",
        "numberOfBytes": "20"
      },
      "t_contract(NFTMintPass)4752": {
        "encoding": "inplace",
        "label": "contract NFTMintPass",
        "numberOfBytes": "20"
      },
      "t_mapping(t_string_memory_ptr,t_struct(User)3293_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct Logic.User)",
        "numberOfBytes": "32",
        "value": "t_struct(User)3293_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(User)3293_storage": {
        "encoding": "inplace",
        "label": "struct Logic.User",
        "members": [
          {
            "astId": 3288,
            "contract": "contracts/Logic.sol:Logic",
            "label": "accPwdHash",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 3290,
            "contract": "contracts/Logic.sol:Logic",
            "label": "softwareWallet",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 3292,
            "contract": "contracts/Logic.sol:Logic",
            "label": "hardwareWallet",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
